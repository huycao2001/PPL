from D96Visitor import D96Visitor
from D96Parser import D96Parser
from AST import *
from functools import reduce

class ASTGeneration(D96Visitor):
    # program: class_declaration+  EOF;
    def visitProgram(self, ctx: D96Parser.ProgramContext):
        lst = []
        for x in ctx.class_declaration():
            lst += self.visit(x)
        return Program(lst)
        # return Program(reduce(lambda prev, curr : prev + self.visit(curr)  , ctx.class_declaration() , []))

    #
    # class_declaration : CLASS ID ( COLON ID )? LP member*  RP;
    def visitClass_declaration(self, ctx : D96Parser.Class_declarationContext ):
        members = []
        for x in ctx.member() : 
            members += self.visit(x)
        if ctx.ID(1) and ctx.COLON(): # with inheritance
            return [ClassDecl(Id(ctx.ID(0).getText()),members,Id(ctx.ID(1).getText()) )] 
        else :
            return [ClassDecl(Id(ctx.ID(0).getText()),members)] 

    #member : attribute_declaration | method_declaration | constructor | destructor ;
    def visitMember(self, ctx: D96Parser.MemberContext):
        return self.visitChildren(ctx)
    
    # attribute_declaration : attribute_type attribute_decl_list SEMI_COLON;
    def visitAttribute_declaration(self, ctx: D96Parser.Attribute_declarationContext):
        att_type = self.visit(ctx.attribute_type())
        res = []
        att_decl_list = self.visit(ctx.attribute_decl_list()) # [(int,a) (int , $b)]
        if(att_type == 'Var') : # return Vardecl
            for i in att_decl_list : 
                if i[1].name[0] == '$' : 
                   res += [AttributeDecl(Static(), VarDecl(i[1],i[0]))]
                else : 
                    res += [AttributeDecl(Instance(), VarDecl(i[1],i[0]))]
        else : 
            for i in att_decl_list : 
                if i[1].name[0] == '$' :
                   res += [ AttributeDecl(Static(), ConstDecl(i[1],i[0]))]
                else : 
                    res += [AttributeDecl(Instance(), ConstDecl(i[1],i[0]))]
        return res

    def visitAttribute_type(self, ctx: D96Parser.Attribute_typeContext):
        if ctx.IMMUTABLE() : 
            return 'Val'
        return 'Var'
    # attribute_decl_list : testing | testing2 ;
    def visitAttribute_decl_list(self, ctx: D96Parser.Attribute_decl_listContext):
        return self.visitChildren(ctx)

    # testing2 :  att_name (COMMA att_name )* COLON compound_type ; // Int a,b,c : = Int;
    def visitTesting2(self, ctx: D96Parser.Testing2Context):
        data_type = self.visit(ctx.compound_type())
        att_list = [] 
        for i in ctx.att_name() : 
            att_list.append(Id(self.visit(i))) # att_list is now a list of Id()
        return list(map(lambda att : (data_type, att), att_list )) # [(int,a)]

    # att_name LB parameter_decl_list? RB block_statement;
    def visitMethod_declaration(self, ctx: D96Parser.Method_declarationContext):
        id = self.visit(ctx.att_name()) ## text of id
        if id[0] == '$' : 
            id = Id(id[1:])
            kind = Static()
        else : 
            id = Id(id)
            kind = Instance()
        param = self.visit(ctx.parameter_decl_list()) if ctx.parameter_decl_list() else []
        block = Block([]) ## not handle yet
        return [MethodDecl(kind,id,param,block)]

    def visitAtt_name(self, ctx: D96Parser.Att_nameContext):
        if ctx.ID() : 
            return ctx.ID().getText()
        return ctx.DOLLAR_ID().getText()

    # constructor : CONSTRUCTOR LB parameter_decl_list? RB block_statement; 
    def visitConstructor(self, ctx: D96Parser.ConstructorContext):
        kind = Static()
        id = Id('Constructor')
        param = self.visit(ctx.parameter_decl_list()) if ctx.parameter_decl_list() else []
        block = Block([])
        return [MethodDecl(kind,id,param,block)]

    def visitDestructor(self, ctx: D96Parser.DestructorContext):
        kind = Static()
        id = Id('Destructor')
        param = []
        block = Block([])
        return [MethodDecl(kind,id,param,block)]


    # parameter_decl_list : (parameter_decl (SEMI_COLON parameter_decl)*)
    def visitParameter_decl_list(self, ctx: D96Parser.Parameter_decl_listContext):
        para_decl_list = []
        for i in ctx.parameter_decl() : 
            para_decl_list += self.visit(i)
        return [VarDecl(id, dataType) for (id, dataType) in para_decl_list]

    # parameter_decl : ids_list COLON compound_type
    def visitParameter_decl(self, ctx: D96Parser.Parameter_declContext):
        ids_list = self.visit(ctx.ids_list())
        data_type = self.visit(ctx.compound_type())
        return [(id, data_type) for id in ids_list]


    # ids_list : ID ( COMMA ID)*;
    def visitIds_list(self, ctx: D96Parser.Ids_listContext):
        return [Id(id.getText()) for id in ctx.ID()]

    # primitive_type | array_type | ID ;
    def visitCompound_type(self, ctx: D96Parser.Compound_typeContext):
        if ctx.ID() : 
            id_value = ctx.ID().getText()
            return ClassType(Id(id_value))
        # elif ctx.primitive_type() : 
        #     return self.visitPrimitive_type(ctx)
        return self.visitChildren(ctx)



    def visitPrimitive_type(self, ctx: D96Parser.Primitive_typeContext):
        if ctx.INT_TYPE():
            return  IntType()
        elif ctx.FLOAT_TYPE():
            return FloatType()
        elif ctx.BOOLEAN_TYPE(): 
            return BoolType()
        elif ctx.STRING_TYPE():
            return StringType()
    # #class a : b { var a ;}
    # #classDecls: classDecl classDecls | classDecl
    # def visitClassdecls(self, ctx: D96Parser.ClassdeclsContext):
    #     if ctx.getChildCount() > 1:
    #         left = self.visit(ctx.classdecl())
    #         right = self.visit(ctx.classdecls())
    #         return left + right
        
    #     return self.visit(ctx.classdecl())
        

    # def visitClassdecl(self, ctx: D96Parser.ClassdeclContext):
    #     return [ClassDecl(Id(ctx.ID().getText()),[])]
       
    # def visitIdClass(self, ctx: D96Parser.IdlistContext):
    #     return list(map(lambda x: Id(x.getText()),ctx.ID()))




