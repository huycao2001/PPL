from D96Visitor import D96Visitor
from D96Parser import D96Parser
from AST import *

class ASTGeneration(D96Visitor):
    # program: classDecls
    def visitProgram(self, ctx: D96Parser.ProgramContext):
        lst = []
        for x in ctx.class_declaration():
            lst += self.visit(x)
        return Program(lst)

    def visitClass_declaration(self, ctx : D96Parser.Class_declarationContext ):
        return [ClassDecl(Id(ctx.ID(0).getText()),[]) ]

    def visitMember(self, ctx: D96Parser.MemberContext):
        return None
    
    def visitAttribute_declaration(self, ctx: D96Parser.Attribute_declarationContext):
        return None


    
    # #class a : b { var a ;}
    # #classDecls: classDecl classDecls | classDecl
    # def visitClassdecls(self, ctx: D96Parser.ClassdeclsContext):
    #     if ctx.getChildCount() > 1:
    #         left = self.visit(ctx.classdecl())
    #         right = self.visit(ctx.classdecls())
    #         return left + right
        
    #     return self.visit(ctx.classdecl())
        

    # def visitClassdecl(self, ctx: D96Parser.ClassdeclContext):
    #     return [ClassDecl(Id(ctx.ID().getText()),[])]
       
    # def visitIdClass(self, ctx: D96Parser.IdlistContext):
    #     return list(map(lambda x: Id(x.getText()),ctx.ID()))





# class ASTGeneration(D96Visitor):
#     def visitProgram(self, ctx: D96Parser.ProgramContext):
#         return Program([FuncDecl(Id("main"),
#                                  [],
#                                  self.visit(ctx.mptype()),
#                                  Block([], [self.visit(ctx.body())] if ctx.body() else []))])

#     def visitMptype(self, ctx: D96Parser.MptypeContext):
#         if ctx.INTTYPE():
#             return IntType()
#         else:
#             return VoidType()

#     def visitBody(self, ctx: D96Parser.BodyContext):
#         return self.visit(ctx.funcall())

#     def visitFuncall(self, ctx: D96Parser.FuncallContext):
#         return CallExpr(Id(ctx.ID().getText()), [self.visit(ctx.exp())] if ctx.exp() else [])

#     def visitExp(self, ctx: D96Parser.ExpContext):
#         if (ctx.funcall()):
#             return self.visit(ctx.funcall())
#         else:
#             return IntLiteral(int(ctx.INTLIT().getText()))
